# Generated by the protocol buffer compiler.  DO NOT EDIT!
# sources: waymo_open_dataset/protos/occupancy_flow_submission.proto
# plugin: python-betterproto2
# This file has been @generated

__all__ = (
    "ChallengeSubmission",
    "ScenarioPrediction",
    "Waypoint",
)

from dataclasses import dataclass

import betterproto2

from ....message_pool import default_message_pool

betterproto2.check_compiler_version("0.3.1")


@dataclass(eq=False, repr=False)
class ChallengeSubmission(betterproto2.Message):
    """
    A set of ScenarioPrediction protos. A ScenarioPrediction proto for each
    example in the test or validation set must be included for a valid
    submission.
    """

    @staticmethod
    def _serialized_pb():
        return b"\n\x13ChallengeSubmission\x12!\n\x0caccount_name\x18\x01 \x01(\tR\x0baccountName\x12,\n\x12unique_method_name\x18\x02 \x01(\tR\x10uniqueMethodName\x12\x18\n\x07authors\x18\x03 \x03(\tR\x07authors\x12 \n\x0baffiliation\x18\x04 \x01(\tR\x0baffiliation\x12 \n\x0bdescription\x18\x05 \x01(\tR\x0bdescription\x12\x1f\n\x0bmethod_link\x18\x06 \x01(\tR\nmethodLink\x12h\n\x14scenario_predictions\x18\x07 \x03(\x0b25.waymo.open_dataset.occupancy_flow.ScenarioPredictionR\x13scenarioPredictions\x12&\n\x0fuses_lidar_data\x18\x08 \x01(\x08R\rusesLidarData\x12(\n\x10uses_camera_data\x18\t \x01(\x08R\x0eusesCameraData\x12A\n\x1duses_public_model_pretraining\x18\n \x01(\x08R\x1ausesPublicModelPretraining\x12,\n\x12public_model_names\x18\x0b \x03(\tR\x10publicModelNames\x120\n\x14num_model_parameters\x18\x0c \x01(\tR\x12numModelParameters"

    account_name: "str" = betterproto2.field(1, betterproto2.TYPE_STRING)
    """
    This must be set as the full email used to register at waymo.com/open.
    """

    unique_method_name: "str" = betterproto2.field(2, betterproto2.TYPE_STRING)
    """
    This name needs to be short, descriptive and unique. Only the latest result
    of the method from a user will show up on the leaderboard.
    """

    authors: "list[str]" = betterproto2.field(
        3, betterproto2.TYPE_STRING, repeated=True
    )
    """
    Author information.
    """

    affiliation: "str" = betterproto2.field(4, betterproto2.TYPE_STRING)

    description: "str" = betterproto2.field(5, betterproto2.TYPE_STRING)
    """
    A brief description of the method.
    """

    method_link: "str" = betterproto2.field(6, betterproto2.TYPE_STRING)
    """
    Link to paper or other link that describes the method.
    """

    scenario_predictions: "list[ScenarioPrediction]" = betterproto2.field(
        7, betterproto2.TYPE_MESSAGE, repeated=True
    )
    """
    The set of scenario predictions to evaluate. One entry should exist for
    every record in the test set.
    """

    uses_lidar_data: "bool" = betterproto2.field(8, betterproto2.TYPE_BOOL)
    """
    Set this to true if your model uses the lidar data provided in the motion
    dataset. This field is now REQUIRED for a valid submission.
    """

    uses_camera_data: "bool" = betterproto2.field(9, betterproto2.TYPE_BOOL)
    """
    Set this to true if your model uses the camera data provided in the motion
    dataset. This field is now REQUIRED for a valid submission.
    """

    uses_public_model_pretraining: "bool" = betterproto2.field(
        10, betterproto2.TYPE_BOOL
    )
    """
    Set this to true if your model used publicly available open-source
    LLM/VLM(s) for pre-training. This field is now REQUIRED for a valid
    submission.
    """

    public_model_names: "list[str]" = betterproto2.field(
        11, betterproto2.TYPE_STRING, repeated=True
    )
    """
    If any open-source model was used, specify their names and configuration.
    """

    num_model_parameters: "str" = betterproto2.field(12, betterproto2.TYPE_STRING)
    """
    Specify an estimate of the number of parameters of the model used to
    generate this submission. The number must be specified as an integer number
    followed by a multiplier suffix (from the set [K, M, B, T, ...], e.g.
    "200K"). This field is now REQUIRED for a valid submission.
    """


default_message_pool.register_message(
    "waymo.open_dataset.occupancy_flow", "ChallengeSubmission", ChallengeSubmission
)


@dataclass(eq=False, repr=False)
class ScenarioPrediction(betterproto2.Message):
    """
    A sequence of `num_waypoints` predictions for a single scenario.
    """

    @staticmethod
    def _serialized_pb():
        return b"\n\x12ScenarioPrediction\x12\x1f\n\x0bscenario_id\x18\x01 \x01(\tR\nscenarioId\x12I\n\twaypoints\x18\x02 \x03(\x0b2+.waymo.open_dataset.occupancy_flow.WaypointR\twaypoints"

    scenario_id: "str" = betterproto2.field(1, betterproto2.TYPE_STRING)
    """
    The unique ID of the scenario being predicted. This ID must match the
    scenario_id field in the test or validation set tf.Example or scenario
    proto corresponding to this set of predictions.
    """

    waypoints: "list[Waypoint]" = betterproto2.field(
        2, betterproto2.TYPE_MESSAGE, repeated=True
    )
    """
    Sequence of occupancy and flow predictions.  This field should be repeated
    `num_waypoints` times.
    """


default_message_pool.register_message(
    "waymo.open_dataset.occupancy_flow", "ScenarioPrediction", ScenarioPrediction
)


@dataclass(eq=False, repr=False)
class Waypoint(betterproto2.Message):
    """
    Occupancy and flow predictions for a single waypoint (one-second interval).
    """

    @staticmethod
    def _serialized_pb():
        return b"\n\x08Waypoint\x12>\n\x1bobserved_vehicles_occupancy\x18\x01 \x01(\x0cR\x19observedVehiclesOccupancy\x12>\n\x1boccluded_vehicles_occupancy\x18\x02 \x01(\x0cR\x19occludedVehiclesOccupancy\x12*\n\x11all_vehicles_flow\x18\x03 \x01(\x0cR\x0fallVehiclesFlow"

    observed_vehicles_occupancy: "bytes" = betterproto2.field(
        1, betterproto2.TYPE_BYTES
    )
    """
    Predicted row-major occupancy grid of currently-observed vehicles for one
    waypoint.  It stores a numpy array shaped [grid_height, grid_width, 1]
    containing probabilites in range [0, 1] quantized to *unsigned int8* in
    range [0, 255].  To reduce the disk space requirements, the array is
    stored as zlib compressed bytes:

    Example code:
    predicted_occupancy = np.random.uniform(size=[256, 256, 1], low=0, high=1)
    predicted_occupancy = np.round(predicted_occupancy * 255).astype(np.uint8)
    bytes = zlib.compress(predicted_occupancy.tobytes())
    """

    occluded_vehicles_occupancy: "bytes" = betterproto2.field(
        2, betterproto2.TYPE_BYTES
    )
    """
    Predicted occupancy grid of currently-occluded vehicles for one waypoint.
    Same representation as observed_vehicle_occupancy.
    """

    all_vehicles_flow: "bytes" = betterproto2.field(3, betterproto2.TYPE_BYTES)
    """
    Predicted backward flow field of all currently-observed and currently-
    occluded vehicles for one waypoint.  The flow vectors are in grid cell
    units and represent (dx, dy) displacements of points within agent boxes.
    Flow is constructed between timesteps `waypoint_size` apart.  Please see
    occupancy_flow_grids.py for more detail.  This field should store a numpy
    array shaped [grid_height, grid_width, 2] containing (dx, dy) vectors.
    The data is stored in row-major order.  The values are quantized to
    *signed int8* in range [-128, 127].  To reduce the disk space requirements,
    the array is stored as zlib compressed bytes:

    Example code:
    predicted_flow = np.random.uniform(size=[256, 256, 2], low=-200, high=200)
    predicted_flow = np.clip(np.round(predicted_flow), -128, 127)
    predicted_flow = predicted_flow.astype(np.int8)
    bytes = zlib.compress(predicted_flow.tobytes())
    """


default_message_pool.register_message(
    "waymo.open_dataset.occupancy_flow", "Waypoint", Waypoint
)
